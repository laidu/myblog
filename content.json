{"pages":[{"title":"android逆向","date":"2017-10-29T10:36:26.000Z","updated":"2018-02-11T06:22:43.331Z","comments":true,"path":"android逆向/index.html","permalink":"https://laidu.github.io/android逆向/index.html","excerpt":"","text":""},{"title":"big-data","date":"2017-10-28T14:15:58.000Z","updated":"2018-02-11T06:22:43.331Z","comments":true,"path":"big-data/index.html","permalink":"https://laidu.github.io/big-data/index.html","excerpt":"","text":""},{"title":"categories","date":"2017-10-28T13:40:23.000Z","updated":"2018-02-11T06:22:43.331Z","comments":true,"path":"categories/index.html","permalink":"https://laidu.github.io/categories/index.html","excerpt":"","text":""},{"title":"dev-ops","date":"2017-10-28T14:15:38.000Z","updated":"2018-02-11T06:22:43.331Z","comments":true,"path":"dev-ops/index.html","permalink":"https://laidu.github.io/dev-ops/index.html","excerpt":"","text":""},{"title":"java","date":"2017-10-28T14:15:22.000Z","updated":"2018-02-11T06:22:43.331Z","comments":true,"path":"java/index.html","permalink":"https://laidu.github.io/java/index.html","excerpt":"","text":""},{"title":"python","date":"2017-10-28T14:15:27.000Z","updated":"2018-02-11T06:22:43.331Z","comments":true,"path":"python/index.html","permalink":"https://laidu.github.io/python/index.html","excerpt":"","text":""},{"title":"编程语言","date":"2017-10-28T13:54:38.000Z","updated":"2018-02-11T06:22:43.331Z","comments":true,"path":"编程语言/index.html","permalink":"https://laidu.github.io/编程语言/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"remember","date":"2018-02-11T06:22:43.331Z","updated":"2018-02-11T06:22:43.331Z","comments":true,"path":"2018/02/11/remember/","link":"","permalink":"https://laidu.github.io/2018/02/11/remember/","excerpt":"","text":"remember 事件定时提醒 昨日／历史回顾 明日待做事情记录提醒 记忆曲线 根据记忆曲线定时回顾提醒 数据云同步","categories":[],"tags":[]},{"title":"","slug":"接口类爬虫rabbitmq优化","date":"2018-02-11T06:22:43.331Z","updated":"2018-02-11T06:22:43.331Z","comments":true,"path":"2018/02/11/接口类爬虫rabbitmq优化/","link":"","permalink":"https://laidu.github.io/2018/02/11/接口类爬虫rabbitmq优化/","excerpt":"","text":"接口类爬虫rabbitmq优化 1、使用非持久化队列 2、数据返回不通过rabbitmq 3、独立进程数据“统一获取，统一返回” 4、多头类爬虫稳定性，同一手机号多次请求返回结果","categories":[],"tags":[]},{"title":"TDD","slug":"TDD","date":"2017-12-22T08:12:05.000Z","updated":"2018-02-11T06:22:43.327Z","comments":true,"path":"2017/12/22/TDD/","link":"","permalink":"https://laidu.github.io/2017/12/22/TDD/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"crawler-summary","slug":"crawler-summary","date":"2017-12-21T02:00:48.000Z","updated":"2018-02-11T06:22:43.327Z","comments":true,"path":"2017/12/21/crawler-summary/","link":"","permalink":"https://laidu.github.io/2017/12/21/crawler-summary/","excerpt":"","text":"#1.爬虫分类 数据爬虫 深度爬虫 页面爬虫 静态页面 动态页面 接口类爬虫 网站接口 app接口 垂直爬虫 业务爬虫 #2.爬虫问题 ##2.1 目标 断点续爬 分布式部署 监控报警 服务进程 成功率 改版 无缝发版 服务高可用 并发 ##2.2 爬虫中的问题 数据包获取 封IP，请求次数限制 验证码限制 页面动态渲染 请求重定向 失败重爬 爬虫结果返回 cookies信息维护 单点登录 数据加密 js 加密 app 加密 apk加壳 native方法加密 自定义加密 系统陈旧、数据复杂。。。 #3.解决方案 ##3.1 工具 ###3.1.1 抓包工具 chrome dev-tool burp site charles ###3.1.2 逆向工具 apktool enjarify jd-gui/jadx-gui android studio ida xposed ##3.2开发组件 ###3.2.1 基础框架 alpha ###3.2.2 爬虫框架 webmagic WebMagic项目代码分为核心和扩展两部分。核心部分(webmagic-core)是一个精简的、模块化的爬虫实现，而扩展部分则包括一些便利的、实用性的功能。WebMagic的架构设计参照了Scrapy，目标是尽量的模块化，并体现爬虫的功能特点。webmagic 总体架构: ###3.2.3 消息组件 rabbitmq 利用ack机制，确保消息被正确消耗，达到断点续爬 新旧爬虫监听同个队列确保服务的无缝发版 实现爬虫的分布式部署 使用定制的spring－rabbitmq模块实现接口类爬虫的rpc调用 ###3.2.4 服务注册 zookeeper 服务注册中心，实现爬虫服务的注册与发现 ###3.2.5 缓存 redis 缓存可用代理IP 缓存ip黑名单信息 同步zookeeper中爬虫服务节点信息，减少zookeeper压力 缓存爬虫配置信息 ###3.2.6 代理池维护 ###3.2.7 nginx 通过nginx的流量切换实现爬虫服务API层无缝发版 ##3.3第三方服务 ###3.3.1 打码服务 tesseract-ocr(开源) 一款由HP实验室开发由Google维护的开源OCR（Optical Character Recognition , 光学字符识别）引擎，与Microsoft Office Document Imaging（MODI）相比，我们可以不断的训练的库，使图像转换文本的能力不断增强；如果团队深度需要，还可以以它为模板，开发出符合自身需求的OCR引擎。 超级鹰（收费） ###3.3.2 代理池服务 阿布云（单一代理IP） 无忧（返回代理IP列表） adsl主机（返回代理IP列表） ##3.4 apk逆向 抓包 smali动态调试 dump内存信息 hook String 构造函数 创建android httpServer 提供so加密服务 #4.爬虫优化 ##4.1 初次优化–爬虫框架异步优化，替换结果接口类爬虫结果汇总策略 使用asyncHttpClient代替httpclient 引入rabbitmq的RPC，消除因服务器系统时间不一致而造成的爬虫结果汇总bug ##4.2 再次优化–rabbitmq、日志优化、部署优化 把爬虫服务按一定规则分组，减少对列和消费者数量 超时时间在小范围内随机，使rabbitmq消息结果返回更”均匀” 优化日志,调整队列大小、使用异步方式打印日志 ##4.3 第三次优化–服务接口优化 #5.爬虫监控 ##5.1 服务器监控 使用nagios监控 服务进程 内存信息 磁盘占用情况 ##5.2 日志分类 nginx日志 修改nginx日志打印格式为json 程序日志 API使用MDC加入请求uuid信息， 编写注解打印关键方法执行信息日志 普通日志 ##5.3 ELK流程 logstash -&gt; kafka -&gt; logstash -&gt; es(x=pack) -&gt; kinaba 日志监控报警 爬虫请求、成功率、图表展示 #6.常用反爬策略 Heaader User-Agent Accept-Charset Cookie Content-Type Referer Cookies验证 ip限制 验证码 字符识别验证 简单四则运算 滑块验证 常用数据加密算法 Base64编码 MD5 AES DES DESede RSA","categories":[],"tags":[{"name":"summary","slug":"summary","permalink":"https://laidu.github.io/tags/summary/"}]},{"title":"Intellij_Idea配置","slug":"Intellij-Idea配置","date":"2017-11-04T07:38:34.000Z","updated":"2018-02-11T06:22:43.327Z","comments":true,"path":"2017/11/04/Intellij-Idea配置/","link":"","permalink":"https://laidu.github.io/2017/11/04/Intellij-Idea配置/","excerpt":"","text":"1 基础配置1.1 字体外观1.2 代码智能提示1.3 github token生成1.4 自定义配置、VM配置2 常用插件2.1 lombok2.2 GsonFormat2.3 Alibaba Java Coding Guidelines2.4 Grep Console2.5 CheckStyle-IDEA2.6 FindBugs-IDEA2.7 Statistic2.3 Jindent-Source Code Formatter2.3 CamelCase3 代码模版3.1 code-template3.1.1 文件创建信息123456#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != \"\")package $&#123;PACKAGE_NAME&#125;;#end/** * $&#123;DESCRIPTION&#125; * * Created by tiancai.zang on $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125; $&#123;HOUR&#125;-$&#123;MINUTE&#125;. */ 3.1.2 常用注解123456789101112131415161718192021222324#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != \"\")package $&#123;PACKAGE_NAME&#125;;#end#set($name=$&#123;NAME.toLowerCase()&#125;+$&#123;PACKAGE_NAME.toLowerCase()&#125;)#set($slf4j=$&#123;name.contains(\"controller\")&#125; || $&#123;name.contains(\"impl\")&#125; || $&#123;name.contains(\"util\")&#125; || $&#123;name.contains(\"test\")&#125;)#set($controller=$&#123;name.contains(\"controller\")&#125;)#set($service=$&#123;name.contains(\"impl\")&#125;)#set($data=$&#123;name.contains(\"dto\")&#125; || $&#123;name.contains(\"entity\")&#125; || $&#123;name.contains(\"model\")&#125;)#set($test=$&#123;name.contains(\"test\")&#125;)#if ($slf4j || !$data) import lombok.extern.slf4j.Slf4j;#end#if ($service) import org.springframework.stereotype.Service;#end#if ($controller)import org.springframework.web.bind.annotation.RestController;import org.springframework.web.bind.annotation.RequestMapping;#end#if ($data) import lombok.AllArgsConstructor;import lombok.Builder;import lombok.Data;import lombok.NoArgsConstructor;#end/** * $&#123;Description&#125; * * Created by tiancai.zang on $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125; $&#123;HOUR&#125;:$&#123;MINUTE&#125;. */#if ($slf4j || !$data) @Slf4j #end#if ($controller) @RestController@RequestMapping(\"/\") #end#if ($service) @Service #end#if ($data) @Data@Builder@AllArgsConstructor@NoArgsConstructor #endpublic class $&#123;NAME&#125; &#123;&#125; 3.2 live-template3.2.1 日志打印1log.info(\"$VAR_NAME_COPY$'s value : &#123;&#125;\", $VAR_NAME$); 需要调整变量次序和默认值，因为在 “” 内输入变量名时，idea并不会有提示。 3.2.2 注释123/** * step $NUMBER$ : $DESCRIPTION$ */ 4 常用快捷键","categories":[],"tags":[]}]}